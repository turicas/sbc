#!/bin/bash

# Copyright 2012 √Ålvaro Justen
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3 dated June, 2007.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.

SBC=$0
SBC_PATH="$HOME/.sbc"
SBC_KEY="$HOME/.sbc/sbc_rsa"
AUTH_KEYS="$HOME/.ssh/authorized_keys"
SBC_PORT=$(($RANDOM + 1024))
SSH_LOCAL_PORT=22

get_username_and_hostname() {
    args=`getopt :1246AaCfgKkMNnqsTtVvXxYyb:c:D:e:F:I:i:L:l:m:O:o:p:R:S:W:w: "$@"`
    username=""
    port=22
    last=""
    for arg in $args; do
        if [ "$last" = "-l" ]; then
            username=$arg
        elif [ "$last" = "-p" ]; then
            port=$arg
        fi
        last=$arg
    done
    user_host=$last
    hostname=${user_host#*@}
    if [ -z "$username" ]; then
        username=${user_host%@*}
    fi
    echo "$username@$hostname:$port"
}

sbc_install() {
    if [ -z "$1" ]; then
        echo "Usage: $0 $plugin <user@remote-server> [scp options]"
        exit 1
    fi

    if [ ! -e "$SBC_KEY" ]; then
        echo -n "[sbc] Generating SSH RSA key without password ($SBC_KEY)..."
        ssh-keygen -t rsa -f $SBC_KEY -N '' &> /dev/null
        echo ' [OK]'
    else
        echo "[sbc] Using existing key $SBC_KEY"
    fi

    cat > /tmp/sbc-install << 'EOF'
#!/bin/bash

mkdir -p $HOME/.sbc $HOME/bin
mv $HOME/sbc_rsa $HOME/sbc $HOME/sbc-startup $HOME/.sbc/
rm -rf $HOME/bin/sbc
ln -s $HOME/.sbc/sbc $HOME/bin/
chmod 700 $HOME/.sbc
chmod 600 $HOME/.sbc/sbc_rsa
chmod +x $HOME/.sbc/sbc
chmod +x $HOME/.sbc/sbc-startup

line_to_add='PATH=$PATH:$HOME/bin'
[ -z "$(grep -s $line_to_add $HOME/.profile)" ] && echo $line_to_add >> $HOME/.profile

rm $0
EOF
    cat > /tmp/sbc-startup << 'EOF'
#!/bin/bash

source $HOME/.sbc/config

SBC_CMD="ssh -CqNf -p $SBC_PORT -o StrictHostKeyChecking=no \
             -o ControlMaster=auto -o ControlPath=$HOME/.sbc/master_%h_%p_%r \
             -i $HOME/.sbc/sbc_rsa $SBC_USER@localhost"
$SBC_CMD
SBC_PID=$(ps -Ao pid,cmd | grep "$(echo $SBC_CMD)" | awk '($2 != "grep") {print $1}')
echo ' [OK]'

$SHELL -l

echo -n '[sbc] Cleaning metadata on remote server...'
rm $HOME/.sbc/config $HOME/.sbc/master_localhost_${SBC_PORT}_${SBC_USER}
echo ' [OK]'
kill -9 $SBC_PID
EOF

    echo -n "[sbc] Copying private key and sbc executables to remote server..."
    cat $SBC_KEY | ssh $@ 'cat - > $HOME/sbc_rsa'
    cat $0 | ssh $@ 'cat - > $HOME/sbc'
    cat /tmp/sbc-install | ssh $@ 'cat - > $HOME/sbc-install'
    cat /tmp/sbc-startup | ssh $@ 'cat - > $HOME/sbc-startup'
    rm /tmp/sbc-install /tmp/sbc-startup
    echo ' [OK]'
    echo -n "[sbc] Executing sbc-install..."
    ssh $@ '/bin/bash $HOME/sbc-install'
    echo ' [OK]'

    echo -n "[sbc] Updating local authorized_keys (if needed)..."
    if [ "$(grep -s "$(cat $SBC_KEY.pub)" $AUTH_KEYS | wc -l)" = 0 ]; then
        cat $SBC_KEY.pub >> $AUTH_KEYS
    fi
    echo ' [OK]'
}

if [ -z "$1" ]; then
    echo "Usage: $0 <plugin_name> [--help] [options]"
    exit 1
fi

plugin=$1
shift

case "$plugin" in
    install)
        # Running on client
        set -e
        sbc_install $@
        set +e
        ;;
    ssh)
        set -e
        # Running on client to start SSH connection
        data=$(get_username_and_hostname $@)
        username=${data%@*}
        hostname=${data#*@}; hostname=${hostname%:*}
        port=${data#*:}
        env_file=$SBC_PATH/.env-$hostname-$port-$username
        env | sed 's/^/export /; s/=/="/; s/$/"/' > $env_file
        echo -n '[sbc] Copying sbc metadata to remote server...'
        cat << EOF | ssh $@ "cat - > \$HOME/.sbc/config"
SBC_PORT=$SBC_PORT
SBC_USER=$USER
REMOTE_USER=$username
REMOTE_HOST=$hostname
REMOTE_PORT=$port
EOF
        echo ' [OK]'
        echo -n '[sbc] Creating back-channel and connecting...'
        ssh -CtR 127.0.0.1:$SBC_PORT:127.0.0.1:$SSH_LOCAL_PORT $@ '$HOME/.sbc/sbc-startup'
        rm $env_file
        set +e
    ;;
    exec)
        # Running on client (called by remote `sbc plugin ...`)
        plugin=$1
        shift
        # Update environment to the process which called 'sbc ssh'
        source $SBC_PATH/.env-$REMOTE_HOST-$REMOTE_PORT-$REMOTE_USER
        if [ ! -x "$SBC_PATH/plugins/$plugin" ]; then
            echo 'ERROR: plugin "'$plugin'" does not exist or is not executable.'
            exit 1
        fi
        # Run the plugin
        $SBC_PATH/plugins/$plugin $@
    ;;
    *)
        # Running a plugin on remote machine
        source $HOME/.sbc/config
        env_vars="REMOTE_PWD=$PWD $(cat $HOME/.sbc/config | tr '\n' ' ')"
        ssh -Cqtp $SBC_PORT -o StrictHostKeyChecking=no -i $HOME/.sbc/sbc_rsa \
            -o ControlMaster=auto -o ControlPath=$HOME/.sbc/master_%h_%p_%r \
            $SBC_USER@localhost \
            "$env_vars /bin/bash -lc \"sbc exec $plugin '$@'\""
    ;;
esac
